(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{314:function(s,t,a){"use strict";a.r(t);var e=a(2),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"javascript类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#javascript类型转换","aria-hidden":"true"}},[s._v("#")]),s._v(" JavaScript类型转换")]),s._v(" "),a("h2",{attrs:{id:"数学运算符中的隐式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数学运算符中的隐式转换","aria-hidden":"true"}},[s._v("#")]),s._v(" 数学运算符中的隐式转换")]),s._v(" "),a("blockquote",[a("p",[s._v("当我们需要对各种非Number类型的值运用数学运算符(- * /)时，会先将非Number类型转换为Number类型。")])]),s._v(" "),a("h3",{attrs:{id:"_1-减、乘、除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-减、乘、除","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.减、乘、除")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 0， 首先把 true 转换为数字 1， 然后执行 1 - 1")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 1,  首先把 null 转换为数字 0， 然后执行 1 - 0")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  NaN, undefined 转换为数字是 NaN")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'5'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//  10， ['5']首先会变成 '5', 然后再变成数字 5, ['5']的转换，涉及到拆箱操作")]),s._v("\n")])])]),a("h3",{attrs:{id:"_2-加法的特殊性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-加法的特殊性","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.加法的特殊性")]),s._v(" "),a("p",[a("strong",[s._v("对加法区别对待的原因：")])]),s._v(" "),a("blockquote",[a("p",[s._v("因为 JS 里  "),a("code",[s._v("+")]),s._v(" 还可以用来拼接字符串。")])]),s._v(" "),a("p",[s._v("下面为3条需要牢牢死记住的规则：")]),s._v(" "),a("ol",[a("li",[s._v("当一侧为String类型，被识别为字符串拼接，并会优先将另一侧转换为字符串类型。")]),s._v(" "),a("li",[s._v("当一侧为Number类型，另一侧为非String的原始类型，则将原始类型转换为Number类型。")]),s._v(" "),a("li",[s._v("当一侧为Number类型，另一侧为引用类型，将引用类型和Number类型转换成字符串后拼接。")])]),s._v(" "),a("blockquote",[a("p",[s._v("以上 3 点，优先级从高到低，即 3+'abc' 会应用规则 1，而 3+true会应用规则 2。")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'456'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 123456   （规则1）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 123    （规则2）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 124    （规则2）")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 123[object Object]    （规则3）")]),s._v("\n")])])]),a("h2",{attrs:{id:"逻辑语句中的隐式转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#逻辑语句中的隐式转换","aria-hidden":"true"}},[s._v("#")]),s._v(" 逻辑语句中的隐式转换")]),s._v(" "),a("p",[s._v("当使用 "),a("code",[s._v("if")]),s._v(" "),a("code",[s._v("while")]),s._v(" "),a("code",[s._v("for")]),s._v(" 等逻辑语句时，表达式应该是一个Boolean，所以表达式中一定伴随着"),a("code",[s._v("隐式类型转换")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"_1-单个变量的情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-单个变量的情况","aria-hidden":"true"}},[s._v("#")]),s._v(" 1.单个变量的情况")]),s._v(" "),a("p",[s._v("如果只有单个变量，会先将变量转换为Boolean值。")]),s._v(" "),a("p",[s._v("只有 "),a("code",[s._v("null")]),s._v(" "),a("code",[s._v("undefined")]),s._v(" "),a("code",[s._v("''")]),s._v(" "),a("code",[s._v("NaN")]),s._v(" "),a("code",[s._v("0")]),s._v(" "),a("code",[s._v("false")]),s._v(" 这几个是 "),a("code",[s._v("false")]),s._v("，其他的情况都是 "),a("code",[s._v("true")]),s._v("，比如 "),a("code",[s._v("{}")]),s._v(" , "),a("code",[s._v("[]")]),s._v("。")]),s._v(" "),a("p",[s._v("但是需要知道的是 "),a("code",[s._v("['123']")]),s._v(" 会被转换成Number类型的 "),a("code",[s._v("123")]),s._v(" 。")]),s._v(" "),a("h3",{attrs:{id:"_2-使用-比较"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-使用-比较","aria-hidden":"true"}},[s._v("#")]),s._v(" 2.使用 == 比较")]),s._v(" "),a("p",[s._v("虽然通常建议使用 ===，不过了解==还是很有必要的。")]),s._v(" "),a("p",[s._v("根据 == 两侧的数据类型，我们总结出 5 条规则：")]),s._v(" "),a("p",[a("strong",[s._v("规则 1：NaN和其他任何类型比较永远返回false（包括和它自己）")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("NaN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])])]),a("p",[a("strong",[s._v("规则 2：Boolean 和其他任何类型比较，Boolean 首先被转换为 Number 类型")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true ")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2'")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false, 先把 true 变成 1，而不是把 '2' 变成 true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true, 先把 true 变成 1， ['1']拆箱成 '1', 再参考规则3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false, 同上")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false ，首先 false 变成 0，然后参考规则4")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false，同上")]),s._v("\n")])])]),a("p",[a("strong",[s._v("规则 3：String和Number比较，先将String转换为Number类型")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("123")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'123'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true, '123' 会先变成 123")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true, '' 会首先变成 0")]),s._v("\n")])])]),a("p",[a("strong",[s._v("规则 4：null == undefined比较结果是true，除此之外，null、undefined和其他任何结果的比较值都为false")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("null")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n")])])]),a("p",[a("strong",[s._v("规则 5：原始类型和引用类型做比较时，引用类型会依照toPrimitive规则转换为原始类型")])]),s._v(" "),a("p",[a("strong",[a("code",[s._v("toPrimitive规则")])]),s._v("，是"),a("code",[s._v("引用类型")]),s._v("向"),a("code",[s._v("原始类型")]),s._v("转变的规则，它遵循先"),a("code",[s._v("valueOf")]),s._v("后"),a("code",[s._v("toString")]),s._v("的模式期望得到一个原始类型。\n如果还是没法得到一个原始类型，就会抛出 TypeError。")]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'[object Object]'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true, 对象和字符串比较，对象通过 toString 得到一个基本类型值")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1,2,3'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true, 同上  [1, 2, 3]通过 toString 得到一个基本类型值")]),s._v("\n")])])]),a("h2",{attrs:{id:"练习"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#练习","aria-hidden":"true"}},[s._v("#")]),s._v(" 练习")]),s._v(" "),a("ol",[a("li",[s._v("[] == ![]")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 第一步，"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 会变成 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 第二步，应用 规则"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" ，题目变成： "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 第三步，应用 规则"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" ，"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("的valueOf是"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("，题目变成： "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 所以， 答案是 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" ！"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//")]),s._v("\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("[undefined] == false")])]),s._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 第一步，应用 规则"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),s._v(" ，"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("undefined")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("通过toString变成 "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      题目变成  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("false")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 第二步，应用 规则"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" ，题目变成  "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("''")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 第三步，应用 规则"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" ，题目变成  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("==")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" 所以， 答案是 "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("true")]),s._v(" ！\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 但是 if([undefined]) 又是个true！")]),s._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);