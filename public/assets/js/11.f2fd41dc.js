(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{220:function(t,_,o){t.exports=o.p+"assets/img/what_is_prototype.5f657bcd.png"},221:function(t,_,o){t.exports=o.p+"assets/img/js_prototype.7fa04dc9.png"},277:function(t,_,o){"use strict";o.r(_);var e=o(2),r=Object(e.a)({},(function(){var t=this,_=t.$createElement,e=t._self._c||_;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_002-javascript原型和原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_002-javascript原型和原型链","aria-hidden":"true"}},[t._v("#")]),t._v(" 002-JavaScript原型和原型链")]),t._v(" "),e("p",[e("motto")],1),t._v(" "),e("h2",{attrs:{id:"一、原型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、原型","aria-hidden":"true"}},[t._v("#")]),t._v(" 一、原型")]),t._v(" "),e("h3",{attrs:{id:"_1-什么是js的原型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是js的原型","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 什么是JS的原型")]),t._v(" "),e("p",[e("code",[t._v("原型")]),t._v(" 就是一个对象，我们也称它为 "),e("code",[t._v("原型对象")]),t._v(" 。")]),t._v(" "),e("h3",{attrs:{id:"_2-原型长什么样子"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-原型长什么样子","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 原型长什么样子")]),t._v(" "),e("p",[t._v("那么原型长什么样子呢？")]),t._v(" "),e("p",[t._v("假如现在有一个函数Foo()，那么当你在控制台将它打印出来后，你会发现他有一个prototype属性， "),e("code",[t._v("Foo.prototype")]),t._v(" 这个就是Foo的原型了。")]),t._v(" "),e("p",[e("img",{attrs:{src:o(220),alt:""}})]),t._v(" "),e("h3",{attrs:{id:"_3-原型的作用（为什有原型对象这个东东-为什么要设计原型对象？）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-原型的作用（为什有原型对象这个东东-为什么要设计原型对象？）","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. 原型的作用（为什有原型对象这个东东/为什么要设计原型对象？）")]),t._v(" "),e("p",[t._v("原型的作用，就是可以 "),e("code",[t._v("共享属性、方法")]),t._v(" 。\n我们通过 "),e("code",[t._v("Foo.prototype.method")]),t._v(" 可以共享属性、方法。")]),t._v(" "),e("h4",{attrs:{id:"为什么需要共享属性、方法呢？"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要共享属性、方法呢？","aria-hidden":"true"}},[t._v("#")]),t._v(" 为什么需要共享属性、方法呢？")]),t._v(" "),e("p",[t._v("我们知道JS的继承和Java不同，因为JS没有类的概念，但是JS数据类型里有对象所以就必须涉及到继承啊。那么就只能new 一个构造函数了。所以构造函数就成为了一个实例对象的原型对象。")]),t._v(" "),e("p",[t._v("但是，这样的设计有一个很大的缺点就是无法共享公共属性、方法。")]),t._v(" "),e("p",[t._v("因为我们知道，每 "),e("code",[t._v("new")]),t._v(" 一个对象，生成的实例是两个不同的对象。所以共有的属性也不是共享的，如果我们改动一个对象的 type 属性，但是另一个不会改变，因为这个属性没有共享。")]),t._v(" "),e("p",[t._v("假如现在我们创建的Foo函数里面有一个getName()方法，那么，在没有原型的情况下，我们每次使用Foo创建一个实例对象，岂不是每个实例对象里都会拥有这个方法。那么当我有一天想要修改这个方法，那我就要每个实例对象就都修改一遍，因为这个方法没有共享。")]),t._v(" "),e("p",[t._v("所以，需要公共的共享属性、方法。")]),t._v(" "),e("p",[t._v("所以就有了原型(原型对象)。")]),t._v(" "),e("h3",{attrs:{id:"_4-原型给函数带来的无限扩展性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-原型给函数带来的无限扩展性","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. 原型给函数带来的无限扩展性")]),t._v(" "),e("p",[t._v("所有的数据类型(除了 "),e("code",[t._v("null")]),t._v(" 和 "),e("code",[t._v("undefined")]),t._v(" )都有 "),e("code",[t._v("constructor")]),t._v(" 构造函数(但 "),e("code",[t._v("constructor")]),t._v(" 不一定是直接的内部属性，它可以在)，但只有 "),e("code",[t._v("函数")]),t._v(" 才有 "),e("code",[t._v("prototype")]),t._v(" 属性。")]),t._v(" "),e("p",[t._v("所以 "),e("code",[t._v("null")]),t._v(" 和 "),e("code",[t._v("undefined")]),t._v(" 是特殊的数据类型；函数是特殊的对象。")]),t._v(" "),e("p",[t._v("函数由于具有 "),e("code",[t._v("prototype")]),t._v(" 属性，使它拥有了无限的扩展性。")]),t._v(" "),e("h3",{attrs:{id:"_5-原型的简单总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-原型的简单总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 5. 原型的简单总结")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("任何一个函数都拥有 "),e("code",[t._v("prototype")]),t._v(" 属性。")]),t._v(" "),e("ul",[e("li",[t._v("** "),e("code",[t._v("prototype")]),t._v(" 的值是一个对象，具有 "),e("code",[t._v("constructor")]),t._v(" 属性。**\n"),e("ul",[e("li",[t._v("** "),e("code",[t._v("constructor")]),t._v(" 也是一个对象。该 "),e("code",[t._v("constructor")]),t._v(" 的值为该函数本身。**")])])])])])]),t._v(" "),e("h2",{attrs:{id:"二、原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、原型链","aria-hidden":"true"}},[t._v("#")]),t._v(" 二、原型链")]),t._v(" "),e("h3",{attrs:{id:"_1-什么是js的原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是js的原型链","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. 什么是JS的原型链")]),t._v(" "),e("p",[t._v("原型与原型之间层层相套、层层链接所形成的链即为 "),e("code",[t._v("原型链")]),t._v(" 。")]),t._v(" "),e("p",[t._v("由于 "),e("code",[t._v("__proto__")]),t._v(" 是任何对象都有的属性，而JS里万物皆对象，所以会形成一条 "),e("code",[t._v("__proto__")]),t._v(" 连起来的链条，递归访问 "),e("code",[t._v("__proto__")]),t._v(" 必须最终到头，并且值是null。")]),t._v(" "),e("p",[t._v("当JS引擎查找对象的属性时，先查找对象本身是否存在该属性，如果不存在，会在原型链上查找，但不会查找自身的prototype")]),t._v(" "),e("h3",{attrs:{id:"_2-原型链的唯一终点object-prototype-proto-null"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-原型链的唯一终点object-prototype-proto-null","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. 原型链的唯一终点"),e("code",[t._v("Object.prototype.__proto__ === null")])]),t._v(" "),e("p",[e("strong",[t._v("为了让原型链有终点")]),t._v("，在原型链的最顶端，JavaScript规定了"),e("code",[t._v("Object.prototype.__proto__ === null")]),t._v("。")]),t._v(" "),e("p",[t._v("由于Function函数的特殊，"),e("strong",[t._v("为了让原型链有终点")]),t._v("，避免循环引用。所以JavaScript规定"),e("code",[t._v("Function.prototype.__proto__ === Object.prototype")]),t._v("，这样既避免了出现循环引用，又让"),e("code",[t._v("__proto__")]),t._v("构成的原型链指向了唯一的终点："),e("code",[t._v("Object.prototype.__proto__ === null")]),t._v("。")]),t._v(" "),e("h2",{attrs:{id:"三、-prototype-和-proto-傻傻搞不清"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、-prototype-和-proto-傻傻搞不清","aria-hidden":"true"}},[t._v("#")]),t._v(" 三、 "),e("code",[t._v("prototype")]),t._v(" 和 "),e("code",[t._v("__proto__")]),t._v(" 傻傻搞不清")]),t._v(" "),e("h3",{attrs:{id:"_1-prototype-和-proto-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-prototype-和-proto-的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. "),e("code",[t._v("prototype")]),t._v(" 和 "),e("code",[t._v("__proto__")]),t._v(" 的区别")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("prototype")]),t._v(" 是函数才有的属性")]),t._v(" "),e("li",[e("code",[t._v("__proto__")]),t._v(" 是每个对象都有的属性( "),e("code",[t._v("__proto__")]),t._v(" 不是一个规范属性，只是部分浏览器实现了此属性)")])]),t._v(" "),e("p",[t._v("大多数情况下， "),e("code",[t._v("__proto__")]),t._v(" 可以理解为**“构造器的原型”**，即：")]),t._v(" "),e("p",[e("code",[t._v("__proto__ === constructor.prototype")]),t._v(" （通过 "),e("code",[t._v("Object.create()")]),t._v(" 创建的对象不适用此等式）")]),t._v(" "),e("h3",{attrs:{id:"_2-proto-的指向"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-proto-的指向","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. "),e("code",[t._v("__proto__")]),t._v(" 的指向")]),t._v(" "),e("p",[e("code",[t._v("__proto__")]),t._v(" 的指向取决于对象创建时使用方式。")]),t._v(" "),e("h4",{attrs:{id:"_1-字面量的方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-字面量的方式","aria-hidden":"true"}},[t._v("#")]),t._v(" (1) 字面量的方式")]),t._v(" "),e("p",[t._v("创建： "),e("code",[t._v("var a = {}")])]),t._v(" "),e("p",[t._v("构造器constructor： "),e("code",[t._v("a.constructor === Object")]),t._v(" 构造器为Object")]),t._v(" "),e("p",[t._v("指向： "),e("code",[t._v("a.__proto__ === a.constructor.prototype")]),t._v(" 或者 "),e("code",[t._v("a.__proto__ === Object.prototype")])]),t._v(" "),e("h4",{attrs:{id:"_2-构造器的方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-构造器的方式","aria-hidden":"true"}},[t._v("#")]),t._v(" (2) 构造器的方式")]),t._v(" "),e("p",[t._v("创建：")]),t._v(" "),e("p",[e("code",[t._v("var A = function(){}")])]),t._v(" "),e("p",[e("code",[t._v("var a = new A()")])]),t._v(" "),e("p",[t._v("构造器constructor： "),e("code",[t._v("a.constructor === A")]),t._v(" 构造器为A")]),t._v(" "),e("p",[t._v("指向： "),e("code",[t._v("a.__proto__===a.constructor.prototype")]),t._v(" 或者 "),e("code",[t._v("a.__proto__===A.prototype.constructor.prototype")]),t._v(" 或者 "),e("code",[t._v("a.__proto__ === A.prototype")])]),t._v(" "),e("h4",{attrs:{id:"_3-object-create-的方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-object-create-的方式","aria-hidden":"true"}},[t._v("#")]),t._v(" (3) Object.create()的方式")]),t._v(" "),e("p",[t._v("创建：")]),t._v(" "),e("p",[e("code",[t._v("var a1 = {}")])]),t._v(" "),e("p",[e("code",[t._v("var a2 = Object.create(a1)")])]),t._v(" "),e("p",[t._v("构造器constructor： "),e("code",[t._v("a2.constructor === Object")]),t._v(" 构造器为Object")]),t._v(" "),e("p",[t._v("指向： "),e("code",[t._v("a2.__proto__ === a1")]),t._v(" （ "),e("code",[t._v("a2.__proto__不等于a2.constructor.prototype")]),t._v(" ）")]),t._v(" "),e("h3",{attrs:{id:"_3-proto-指向的通用规则"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-proto-指向的通用规则","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. "),e("code",[t._v("__proto__")]),t._v(" 指向的通用规则")]),t._v(" "),e("ol",[e("li",[e("code",[t._v("对象")]),t._v(" 有 "),e("code",[t._v("__proto__")]),t._v(" 属性， "),e("code",[t._v("函数")]),t._v(" 有 "),e("code",[t._v("prototype")]),t._v(" 属性；")]),t._v(" "),e("li",[e("code",[t._v("对象")]),t._v(" 由 "),e("code",[t._v("函数")]),t._v(" 生成;")]),t._v(" "),e("li",[t._v("生成 "),e("code",[t._v("对象")]),t._v(" 时， "),e("code",[t._v("对象")]),t._v(" 的 "),e("code",[t._v("__proto__")]),t._v(" 属性指向 "),e("code",[t._v("函数")]),t._v(" 的 "),e("code",[t._v("prototype")]),t._v(" 属性("),e("strong",[t._v("注意Object.create()的创建方式")]),t._v(")。")])]),t._v(" "),e("h3",{attrs:{id:"_4-object函数和function函数的原型（特殊）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-object函数和function函数的原型（特殊）","aria-hidden":"true"}},[t._v("#")]),t._v(" 4. Object函数和Function函数的原型（特殊）")]),t._v(" "),e("p",[t._v("上面提到，函数会有一个 "),e("code",[t._v("prototype")]),t._v(" 属性。而且除了Object函数和Function函数，其他函数的 "),e("code",[t._v("prototype")]),t._v(" 是一个类型为 "),e("code",[t._v('"object"')]),t._v(" 的对象，它有两个属性： "),e("code",[t._v("constructor")]),t._v(" 和 "),e("code",[t._v("__proto__")]),t._v(" 。其中 "),e("code",[t._v("constructor")]),t._v(" 属性指向这个函数自身， "),e("code",[t._v("__proto__")]),t._v(" 属性指向 "),e("code",[t._v("Object.prototype")]),t._v(" 。")]),t._v(" "),e("h4",{attrs:{id:"object函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#object函数","aria-hidden":"true"}},[t._v("#")]),t._v(" Object函数")]),t._v(" "),e("p",[t._v("但是， "),e("code",[t._v("Object.prototype")]),t._v(" 不太一样了就。")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('> typeof Object.prototype\n"object"\n> Object.prototype\n{\n    constructor: ƒ Object()\n    hasOwnProperty: ƒ hasOwnProperty()\n    isPrototypeOf: ƒ isPrototypeOf()\n    propertyIsEnumerable: ƒ propertyIsEnumerable()\n    toLocaleString: ƒ toLocaleString()\n    toString: ƒ toString()\n    valueOf: ƒ valueOf()\n    __defineGetter__: ƒ __defineGetter__()\n    __defineSetter__: ƒ __defineSetter__()\n    __lookupGetter__: ƒ __lookupGetter__()\n    __lookupSetter__: ƒ __lookupSetter__()\n    get __proto__: ƒ __proto__()\n    set __proto__: ƒ __proto__()\n}\n')])])]),e("p",[e("code",[t._v("Object")]),t._v(" 函数的 "),e("code",[t._v("prototype")]),t._v(" 属性也是一个类型为 "),e("code",[t._v('"object"')]),t._v(" 的对象，但 "),e("code",[t._v("Object.prototype")]),t._v(" 多了一大堆方法，这些方法都是JavaScript对象的系统默认方法。\n然后，我们还会发现，Object函数的 "),e("code",[t._v("prototype")]),t._v(" 属性里没有 "),e("code",[t._v("__proto__")]),t._v(" 属性，当我们我们试着把它的 "),e("code",[t._v("__proto__")]),t._v(" 属性打出来看看：")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("> Object.prototype.__proto__\nnull\n")])])]),e("p",[t._v("Object函数特殊情况： "),e("code",[t._v("Object.prototype.__proto__ === null")]),t._v(" ，这就是JavaScript原型链的终点了。")]),t._v(" "),e("h4",{attrs:{id:"function函数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#function函数","aria-hidden":"true"}},[t._v("#")]),t._v(" Function函数")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('> typeof Function.prototype\n"function"\n')])])]),e("p",[t._v("Function函数的 "),e("code",[t._v("prototype")]),t._v(" 属性是一个 "),e("code",[t._v('"function"')]),t._v(" 类型的对象，而不像其他函数是类型为 "),e("code",[t._v('"object"')]),t._v(" 的对象。")]),t._v(" "),e("p",[t._v("那它到底是个什么样的函数呢？")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v('> console.dir(Function.prototype)\n{ ƒ anonymous()\n    arguments: (...)\n    caller: (...)\n    length: 0\n    name: ""\n    constructor: ƒ Function()\n    apply: ƒ apply()\n    bind: ƒ bind()\n    call: ƒ call()\n    toString: ƒ toString()\n    Symbol(Symbol.hasInstance): ƒ [Symbol.hasInstance]()\n    get arguments: ƒ ()\n    set arguments: ƒ ()\n    get caller: ƒ ()\n    set caller: ƒ ()\n    __proto__: Object\n    [[FunctionLocation]]: <unknown>\n    [[Scopes]]: Scopes[0]\n}\n')])])]),e("p",[t._v("现在再来看看 "),e("code",[t._v("Function.__proto__")]),t._v(" 是个什么样子哒。")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("> Function.prototype.__proto__\n{\n    constructor: ƒ Object()\n    hasOwnProperty: ƒ hasOwnProperty()\n    isPrototypeOf: ƒ isPrototypeOf()\n    propertyIsEnumerable: ƒ propertyIsEnumerable()\n    toLocaleString: ƒ toLocaleString()\n    toString: ƒ toString()\n    valueOf: ƒ valueOf()\n    __defineGetter__: ƒ __defineGetter__()\n    __defineSetter__: ƒ __defineSetter__()\n    __lookupGetter__: ƒ __lookupGetter__()\n    __lookupSetter__: ƒ __lookupSetter__()\n    get __proto__: ƒ __proto__()\n    set __proto__: ƒ __proto__()\n}\n")])])]),e("p",[t._v("发现没有，看起来很像是 "),e("code",[t._v("Object.prototype")]),t._v(" ，让我们来看看：")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("> Function.prototype.__proto__ === Object.prototype\ntrue\n")])])]),e("p",[t._v("所以，一个 "),e("code",[t._v('"function"')]),t._v(" 类型的对象，应该是由Function函数生成的，那它的 "),e("code",[t._v("__proto__")]),t._v(" 属性应该指向 "),e("code",[t._v("Function.prototype")]),t._v(" ，也就是 "),e("code",[t._v("Function.prototype.__proto__ === Function.prototype")]),t._v(" 。和Object函数同样的问题出现了："),e("strong",[t._v("循环引用")]),t._v("。")]),t._v(" "),e("p",[t._v("所以JavaScript规定 "),e("code",[t._v("Function.prototype.__proto__ === Object.prototype")]),t._v(" ，这样"),e("strong",[t._v("既避免了出现循环引用")]),t._v("，又"),e("strong",[t._v("让 "),e("code",[t._v("__proto__")]),t._v(" 构成的原型链指向了唯一的终点")]),t._v("： "),e("code",[t._v("Object.prototype.__proto__ === null")]),t._v(" 。‘")]),t._v(" "),e("h2",{attrs:{id:"四、检验一下自己叭"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、检验一下自己叭","aria-hidden":"true"}},[t._v("#")]),t._v(" 四、检验一下自己叭")]),t._v(" "),e("p",[t._v("现在你可以通过下面的经典图来检验一下自己是不是真的懂原型和原型链了。")]),t._v(" "),e("img",{staticStyle:{zoom:"50%"},attrs:{src:o(221)}}),t._v(" "),e("h2",{attrs:{id:"五、关于原型链的相关object方法"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、关于原型链的相关object方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 五、关于原型链的相关Object方法")]),t._v(" "),e("h3",{attrs:{id:"_1-object-create"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-object-create","aria-hidden":"true"}},[t._v("#")]),t._v(" 1. Object.create()")]),t._v(" "),e("p",[t._v("用于创建一个新的对象，它使用现有对象作为新对象的 "),e("code",[t._v("__proto__")]),t._v(" 。")]),t._v(" "),e("p",[t._v("第一个参数为原型对象，第二个参数可选，可以传入属性描述符对象或 null，其他类型直接报错。")]),t._v(" "),e("h3",{attrs:{id:"_2-object-getownpropertynames"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-object-getownpropertynames","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. Object.getOwnPropertyNames()")]),t._v(" "),e("p",[t._v("该方法返回一个由指定对象的所有自身属性的属性名组成的数组。")]),t._v(" "),e("ul",[e("li",[t._v("包括不可枚举属性")]),t._v(" "),e("li",[t._v("但不包括 Symbol 值作为名称的属性")]),t._v(" "),e("li",[t._v("不会获取到原型链上的属性")]),t._v(" "),e("li",[t._v("当不存在普通字符串作为名称的属性时返回一个空数组")])]),t._v(" "),e("h3",{attrs:{id:"_3-object-getprototypeof-object-setprototypeof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-object-getprototypeof-object-setprototypeof","aria-hidden":"true"}},[t._v("#")]),t._v(" 3. Object.getPrototypeOf()/Object.setPrototypeOf()")]),t._v(" "),e("p",[t._v("这两个用于获取和设置一个对象的原型，它主要用来代替 "),e("code",[t._v("__proto__")]),t._v(" 。")]),t._v(" "),e("h3",{attrs:{id:"_4-hasownproperty"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-hasownproperty","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.hasOwnProperty()")]),t._v(" "),e("p",[t._v("用来判断一个对象"),e("strong",[t._v("本身")]),t._v("是否含有该属性，返回一个 Boolean 值。")]),t._v(" "),e("ul",[e("li",[e("strong",[t._v("原型链上的属性")]),t._v(" 一律返回 false")]),t._v(" "),e("li",[e("code",[t._v("Symbol")]),t._v(" 类型的属性也可以被检测")])]),t._v(" "),e("h3",{attrs:{id:"_5-isprototypeof"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-isprototypeof","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.isPrototypeOf()")]),t._v(" "),e("p",[t._v("该方法用于检测一个对象是否存在于另一个对象的原型链上，返回一个 Boolean 值。")]),t._v(" "),e("blockquote",[e("p",[t._v("参考:")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.im/post/5835853f570c35005e413b19",target:"_blank",rel:"noopener noreferrer"}},[t._v("三张图搞懂JavaScript的原型对象与原型链"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://www.jianshu.com/p/686b61c4a43d",target:"_blank",rel:"noopener noreferrer"}},[t._v("彻底理解JavaScript原型链（一）—__proto__的默认指向"),e("OutboundLink")],1)])])])}),[],!1,null,null,null);_.default=r.exports}}]);