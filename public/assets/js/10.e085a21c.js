(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{217:function(t,a,s){t.exports=s.p+"assets/img/tcp-http-relationship.7fb84713.png"},218:function(t,a,s){t.exports=s.p+"assets/img/google-dns-search.5bee3e3e.png"},268:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"_003-从输入url到页面加载显示完成到底发生了什么？——网络篇"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_003-从输入url到页面加载显示完成到底发生了什么？——网络篇","aria-hidden":"true"}},[t._v("#")]),t._v(" 003-从输入URL到页面加载显示完成到底发生了什么？——网络篇")]),t._v(" "),e("p",[e("motto")],1),t._v(" "),e("p",[t._v("这个题瞅着挺眼熟，看来不深入了解一下是不行了。\n那我们就来看看怎么给面试官一个看起来还行的答案。")]),t._v(" "),e("p",[e("strong",[t._v("精简版")])]),t._v(" "),e("p",[t._v("如果，你想混一下，那么给你"),e("code",[t._v("精简版")]),t._v("：")]),t._v(" "),e("ol",[e("li",[e("p",[t._v("首先，浏览器根据请求的URL交给DNS域名解析，找到真实的IP，向服务器发起请求；")])]),t._v(" "),e("li",[e("p",[t._v("服务器交给后台处理，在完成后返回数据，浏览器就可以接收HTML、CSS、JavaScript等文件；")])]),t._v(" "),e("li",[e("p",[t._v("浏览器对加载到的HTML、CSS、JavaScript等资源进行语法解析，构建相应的内部数据结构（DOM树、CSS树、render树等）；\n载入解析到的资源文件、渲染页面、完成。")])])]),t._v(" "),e("p",[e("strong",[t._v("正式版")])]),t._v(" "),e("h2",{attrs:{id:"一-处理请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-处理请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 一. 处理请求")]),t._v(" "),e("p",[t._v("首先，浏览器会开启一个线程来处理这个请求，浏览器将会分析你输入的内容（"),e("code",[t._v("协议头")]),t._v("、"),e("code",[t._v("主机域名")]),t._v("或"),e("code",[t._v("IP地址")]),t._v("、"),e("code",[t._v("端口号")]),t._v("、"),e("code",[t._v("请求路径")]),t._v("、"),e("code",[t._v("查询参数")]),t._v("、）。")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[t._v("//通用的URL由9部分组成\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scheme")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("://"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(":"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("@"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(":"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("/"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(";"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("params")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("?"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("query")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("#"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("hash")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scheme")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("://"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("."),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("domain")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(":"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("/"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("/"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("filename")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("部分名词解释：")]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("scheme")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("：对于web页面来说最常用的协议就是http和https\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("user")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(":"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("password")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("：user和password现在不常见，不会在URL明文书写用户名和密码了，都是通过登录的方式\n//或者\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("host")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("：定义域主机 。（如http默认的主机是www）\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("domain")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" ： 定义因特网域名。（如http://baidu.com)\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("port")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("：定义主机上的端口号。端口号用来区分主机上的进程，方便找到web服务器，http默认是80\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("path")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("：path是资源的路径，也就是存放位置，不一定和物理路径完全对应，符合web服务器路由约定即可\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("params")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("：在一些协议中需要参数来访问资源，例如 ftp 是二进制还是文本传输，参数是名值对，用;隔开\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("query")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("：这个是get请求最常用的传递参数方式了 ?a=1&b=2&=3\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("hash")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("：hash也称为片段，设计为标识文档的一部分，很多MVVM框架用作了路由功能\n//或者\n"),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("filename")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(": 定义文档和资源的名称\n")])])]),e("p",[t._v("通常，如果输入的内容里包含了“.com”，浏览器不会认为你输入的是一个搜索关键字。在确定它是一个 URL 之后，浏览器会检查它是否指明了某种协议，如果没有，就会在开头添加“http://”。因为如果你没有指定具体的 HTTP 协议选项，浏览器就会使用默认值，如端口 80、GET 方法、不使用基本的身份验证。")]),t._v(" "),e("h2",{attrs:{id:"二-构建请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-构建请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 二. 构建请求")]),t._v(" "),e("p",[t._v("解析完后，然后开启网络线程，浏览器会构建请求行：")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求方法是GET，路径为根路径，HTTP协议版本为1.1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\n")])])]),e("h2",{attrs:{id:"三-查找强缓存"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-查找强缓存","aria-hidden":"true"}},[t._v("#")]),t._v(" 三. 查找强缓存")]),t._v(" "),e("p",[t._v("在真正发起网络请求之前，浏览器会先在浏览器缓存中查询是否有要请求的文件。")]),t._v(" "),e("p",[t._v("其中，浏览器缓存是一种在本地保存资源副本，以供下次请求时直接使用的技术。当浏览器发现请求的资源已经在浏览器缓存中存有副本，它会拦截请求，返回该资源的副本，并直接结束请求，而不会再去源服务器重新下载。")]),t._v(" "),e("p",[t._v("这样做的好处有：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("缓解服务器端压力，提升性能（获取资源的耗时更短了）；")])]),t._v(" "),e("li",[e("p",[t._v("对于网站来说，缓存是实现快速资源加载的重要组成部分。")])])]),t._v(" "),e("p",[t._v("当然，如果缓存查找失败，就会进入下一步。")]),t._v(" "),e("h2",{attrs:{id:"四-dns解析"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-dns解析","aria-hidden":"true"}},[t._v("#")]),t._v(" 四. DNS解析")]),t._v(" "),e("p",[t._v("HTTP 网络请求的第一步是做什么呢？")]),t._v(" "),e("img",{staticStyle:{zoom:"80%"},attrs:{src:s(217)}}),t._v(" "),e("p",[t._v("结合上图看，是和服务器建立 TCP 连接。")]),t._v(" "),e("p",[t._v("那我们凭借什么信息来建立连接呢？")]),t._v(" "),e("p",[t._v("建立 TCP 连接的第一步就是需要准备 IP 地址和端口号。")]),t._v(" "),e("p",[t._v("那怎么获取 IP 地址和端口号呢？")]),t._v(" "),e("p",[t._v("我们发现，我们只有一个 URL 地址，那么是否可以"),e("strong",[t._v("利用 URL 地址来获取 IP 和端口信息")]),t._v("呢？")]),t._v(" "),e("p",[t._v("一般我们输入的URL是服务器域名，数据包是通过"),e("code",[t._v("IP地址")]),t._v("传给对方的，那我们就需要知道对方的"),e("code",[t._v("IP地址")]),t._v("，这个过程需要依赖一个服务系统，这个系统将域名和 IP 一一映射，我们将这个系统就叫做DNS（Domain Name System域名系统）。得到具体 IP 的过程就是DNS解析。（DNS就像是一个翻译）；")]),t._v(" "),e("p",[e("strong",[t._v("解析过程")])]),t._v(" "),e("p",[t._v("DNS解析是一个递归查询的过程。\n"),e("img",{attrs:{src:s(218),alt:"图片来自"}}),t._v("\n上述图片是查找www.google.com的IP地址过程。")]),t._v(" "),e("p",[t._v("首先在"),e("code",[t._v("本地域名服务器")]),t._v("中查询IP地址，如果没有找到的情况下，"),e("code",[t._v("本地域名服务器")]),t._v("会向"),e("code",[t._v("根域名服务器")]),t._v("发送一个请求，如果"),e("code",[t._v("根域名服务器")]),t._v("也不存在该域名时，本地域名会向"),e("code",[t._v("com顶级域名服务器")]),t._v("发送一个请求，依次类推下去。直到最后"),e("code",[t._v("本地域名服务器")]),t._v("得到google的IP地址并把它缓存到本地，供下次查询使用。")]),t._v(" "),e("p",[t._v("从上述过程中，可以看出网址的解析是一个从右向左的过程: com -> google.com -> www.google.com。但是你是否发现少了点什么，"),e("code",[t._v("根域名服务器")]),t._v("的解析过程呢？事实上，真正的网址是www.google.com.，并不是我多打了一个.，这个.对应的就是"),e("code",[t._v("根域名服务器")]),t._v("，默认情况下所有的网址的最后一位都是.，既然是默认情况下，为了方便用户，通常都会省略，浏览器在请求DNS的时候会自动加上，所有网址真正的解析过程为: . -> .com -> google.com. -> www.google.com.。")]),t._v(" "),e("p",[e("strong",[t._v("DNS优化")])]),t._v(" "),e("p",[t._v("上文中请求到google的IP地址时，经历了8个步骤，这个过程中存在多个请求(同时存在UDP和TCP请求,DNS在区域传输的时候使用TCP协议，其他时候使用UDP协议。)。")]),t._v(" "),e("p",[t._v("试想如果每次都经过这么多步骤，那就太耗时间？如何减少该过程的步骤呢？那就是DNS缓存。")]),t._v(" "),e("p",[e("strong",[t._v("DNS缓存")])]),t._v(" "),e("p",[t._v("DNS存在着多级缓存，从离浏览器的距离排序的话，有以下几种:")]),t._v(" "),e("ul",[e("li",[t._v("浏览器缓存（注意： 浏览器的缓存一般不会太长，1min左右。假如时间设置过长，会导致DNS在IP变更时不能及时解析获取到最新的IP）")]),t._v(" "),e("li",[t._v("系统缓存（如果是第一次访问网站，将会查找系统缓存。）")]),t._v(" "),e("li",[t._v("路由器缓存")]),t._v(" "),e("li",[t._v("ISP服务器缓存(Internet Service Provider的简称，即因特网服务提供商,咱们一般就是网通或者电信。这时就会到电信（你的服务商）的DNS 上查找缓存)")])]),t._v(" "),e("p",[e("strong",[t._v("如果以上都没有，开启"),e("code",[t._v("递归搜索")]),t._v("查找IP的过程")])]),t._v(" "),e("ul",[e("li",[t._v("根域名服务器缓存")]),t._v(" "),e("li",[t._v("顶级域名服务器缓存")]),t._v(" "),e("li",[t._v("主域名服务器缓存")])]),t._v(" "),e("p",[e("strong",[t._v("所以，重点来啦，在DNS解析的时候，")])]),t._v(" "),e("ol",[e("li",[e("p",[t._v("浏览器会先搜索自己的 DNS 缓存（维护一张域名与 IP 地址的对应表）；")])]),t._v(" "),e("li",[e("p",[t._v("搜索操作系统中的 DNS 缓存（维护一张域名与 IP 地址的对应表）；")])]),t._v(" "),e("li",[e("p",[t._v("搜索操作系统的 hosts 文件（ Windows 环境下，维护一张域名与 IP 地址的对应表）；")])]),t._v(" "),e("li",[e("p",[t._v("操作系统将域名发送至 LDNS（本地区域名服务器，如果你在学校接入互联网，则 LDNS 服务器就在学校，如果通过电信接入互联网，则 LDNS 服务器就在你当地的电信那里。）LDNS 查询自己的 DNS 缓存（一般查找成功率在 80% 左右），查找成功则返回结果，失败则发起一个迭代 DNS 解析请求；")])]),t._v(" "),e("li",[e("p",[t._v("LDNS 向 Root Name Server （根域名服务器，其虽然没有每个域名的的具体信息，但存储了负责每个域，如 com、net、org等的解析的顶级域名服务器的地址）发起请求，此处，Root Name Server 返回 com 域的顶级域名服务器的地址；")])]),t._v(" "),e("li",[e("p",[t._v("LDNS 向 com 域的顶级域名服务器发起请求，返回 google.com 域名服务器地址；")])]),t._v(" "),e("li",[e("p",[t._v("LDNS 向 google.com 域名服务器发起请求，得到 www.google.com 的 IP 地址；")])]),t._v(" "),e("li",[e("p",[t._v("LDNS 将得到的 IP 地址返回给操作系统，同时自己也将 IP 地址缓存起来；")])]),t._v(" "),e("li",[e("p",[t._v("操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起来；")])])]),t._v(" "),e("p",[t._v("那么现在，浏览器已经得到了域名对应的 IP 地址。")]),t._v(" "),e("p",[e("strong",[t._v("DNS负载均衡")])]),t._v(" "),e("p",[t._v("不知道大家有没有思考过一个问题: DNS返回的IP地址是否每次都一样？")]),t._v(" "),e("p",[t._v("如果每次都一样是否说明你请求的资源都位于同一台机器上面，那么这台机器需要多高的性能和储存才能满足亿万请求呢？其实真实的互联网世界背后存在成千上百台服务器，大型的网站甚至更多。")]),t._v(" "),e("p",[t._v("但是在用户的眼中，它需要的只是处理他的请求，哪台机器处理请求并不重要。")]),t._v(" "),e("p",[t._v("DNS可以返回一个合适的机器的IP给用户，例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等，这种过程就是"),e("code",[t._v("DNS负载均衡")]),t._v("，又叫做"),e("code",[t._v("DNS重定向")]),t._v("。")]),t._v(" "),e("p",[t._v("大家耳熟能详的"),e("code",[t._v("CDN(Content Delivery Network)")]),t._v("就是利用DNS的重定向技术，DNS服务器会返回一个跟用户最接近的点的IP地址给用户，CDN节点的服务器负责响应用户的请求，提供所需的内容。")]),t._v(" "),e("h2",{attrs:{id:"五-等待-tcp-队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五-等待-tcp-队列","aria-hidden":"true"}},[t._v("#")]),t._v(" 五. 等待 TCP 队列")]),t._v(" "),e("p",[t._v("通过DNS拿到 IP 之后，接下来就需要获取端口号了。通常情况下，如果 URL 没有特别指明端口号，那么 HTTP 协议默认是 80 端口。")]),t._v(" "),e("p",[t._v("Chrome 有个机制，同一个域名同时最多只能建立 6 个 TCP 连接，如果在同一个域名下同时有 10 个请求发生，那么其中 4 个请求会进入排队等待状态，直至进行中的请求完成。当然，如果当前请求数量少于 6，会直接进入下一步，建立 TCP 连接。")]),t._v(" "),e("p",[t._v("所以，本步可能不存在。")]),t._v(" "),e("h2",{attrs:{id:"六-建立tcp连接-进行http请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六-建立tcp连接-进行http请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 六. 建立TCP连接+进行HTTP请求")]),t._v(" "),e("blockquote",[e("p",[t._v("HTTP 请求分为三个部分：TCP 三次握手、HTTP请求、响应信息、关闭 TCP 连接")])]),t._v(" "),e("h3",{attrs:{id:"tcp"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp","aria-hidden":"true"}},[t._v("#")]),t._v(" TCP")]),t._v(" "),e("p",[t._v("那么TCP是什么呢？")]),t._v(" "),e("blockquote",[e("p",[t._v("TCP（Transmission Control Protocol，传输控制协议）是一种面向连接的、可靠的、基于字节流的传输层通信协议。")])]),t._v(" "),e("p",[t._v("TCP的可靠主要体现在以下三个方面：")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("三次握手确认连接：TCP的三次握手主要是为了确认双方（即客户端和服务端）都拥有接收和发送数据的能力，通过发送3个数据包来建立客户端和服务器之间的连接。")])]),t._v(" "),e("li",[e("p",[t._v("数据包校验，保证数据到达接收方：就是接收方接收到数据包后必须要向发送方确认, 如果发送方没有接到这个确认的消息，就判定为数据包丢失，并重新发送该数据包。当然，发送的过程中还有一个优化策略，就是把大的数据包拆成一个个小包，依次传输到接收方，接收方按照这个小包的顺序把它们组装成完整数据包。")])]),t._v(" "),e("li",[e("p",[t._v("通过四次挥手断开连接：数据传输完成，现在要断开连接了，通过四次挥手来断开连接。")])])]),t._v(" "),e("p",[t._v("具体TCP的相关知识，可查看"),e("router-link",{attrs:{to:"/network-tcp/001/"}},[t._v("搞懂那个TCP")])],1),t._v(" "),e("h3",{attrs:{id:"发送http请求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#发送http请求","aria-hidden":"true"}},[t._v("#")]),t._v(" 发送HTTP请求")]),t._v(" "),e("p",[t._v("HTTP的请求报文由"),e("code",[t._v("请求行（request line）")]),t._v("、"),e("code",[t._v("请求头（header）")]),t._v("、"),e("code",[t._v("请求体")]),t._v("三个部分组成。")]),t._v(" "),e("p",[e("strong",[t._v("请求行")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 格式：Method Request-URL HTTP-Version CRLF(换行符)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 请求方法是GET，路径为根路径，HTTP协议版本为1.1")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\n")])])]),e("p",[t._v("请求行，包含"),e("code",[t._v("请求方法")]),t._v("、"),e("code",[t._v("URL")]),t._v("、"),e("code",[t._v("协议版本")])]),t._v(" "),e("p",[t._v("常用的请求方法：GET, POST, PUT, DELETE, OPTIONS, HEAD")]),t._v(" "),e("p",[t._v("URL 即请求地址")]),t._v(" "),e("p",[t._v("现在常用的协议版本为 HTTP/1.1")]),t._v(" "),e("p",[e("strong",[t._v("请求头")])]),t._v(" "),e("p",[t._v("请求头，包含请求的附加信息，由 关键字/值 对组成，每行一对，用英文冒号分隔。")]),t._v(" "),e("div",{staticClass:"language-http extra-class"},[e("pre",{pre:!0,attrs:{class:"language-http"}},[e("code",[e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Accept:")]),t._v(" text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Accept-Encoding:")]),t._v(" gzip, deflate, br\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Accept-Language:")]),t._v(" zh-CN,zh;q=0.9\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Cache-Control:")]),t._v(" no-cache\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Connection:")]),t._v(" keep-alive\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Cookie:")]),t._v(" /* 省略cookie信息 */\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Host:")]),t._v(" www.google.com\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Pragma:")]),t._v(" no-cache\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("Upgrade-Insecure-Requests:")]),t._v(" 1\n"),e("span",{pre:!0,attrs:{class:"token header-name keyword"}},[t._v("User-Agent:")]),t._v(" Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.132 Safari/537.36\n")])])]),e("p",[t._v("说几个主要的，")]),t._v(" "),e("p",[t._v("Host: 表示主机名，虚拟主机；")]),t._v(" "),e("p",[t._v("Connection: HTTP/1.1 增加的，使用 keepalive，即持久连接，一个连接可以发多个请求；")]),t._v(" "),e("p",[t._v("User-Agent: 请求发出者；")]),t._v(" "),e("p",[e("strong",[t._v("请求体(请求正文)")])]),t._v(" "),e("p",[t._v("请求体在GET方法时不存在，在POST，PUT等方法下存在，常见的场景是表单提交")]),t._v(" "),e("p",[t._v("GET产生一个TCP数据包，POST产生两个")]),t._v(" "),e("p",[t._v("GET请求时会把headers和data数据一起发送出去；")]),t._v(" "),e("p",[t._v("POST请求时，浏览器先发送headers，服务器100继续，浏览器再发送data。")]),t._v(" "),e("h2",{attrs:{id:"七-数据的传输过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七-数据的传输过程","aria-hidden":"true"}},[t._v("#")]),t._v(" 七.数据的传输过程")]),t._v(" "),e("h3",{attrs:{id:"传输层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#传输层","aria-hidden":"true"}},[t._v("#")]),t._v(" 传输层")]),t._v(" "),e("p",[t._v("寻得服务器地址，客户端在"),e("code",[t._v("传输层")]),t._v("便可以和服务器通过三次握手建立tcpip连接")]),t._v(" "),e("h3",{attrs:{id:"网络层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#网络层","aria-hidden":"true"}},[t._v("#")]),t._v(" 网络层")]),t._v(" "),e("p",[t._v("在上边DNS解析的过程中我们已经拿到了IP地址，此时"),e("code",[t._v("网络层")]),t._v("便会通过IP地址寻得对应服务器的物理地址")]),t._v(" "),e("h3",{attrs:{id:"数据链路层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#数据链路层","aria-hidden":"true"}},[t._v("#")]),t._v(" 数据链路层")]),t._v(" "),e("p",[t._v("连接建立后"),e("code",[t._v("数据链路层")]),t._v("将数据包装成帧；")]),t._v(" "),e("h3",{attrs:{id:"物理层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#物理层","aria-hidden":"true"}},[t._v("#")]),t._v(" 物理层")]),t._v(" "),e("p",[t._v("最后"),e("code",[t._v("物理层")]),t._v("利用物理介质进行传输；")]),t._v(" "),e("p",[t._v("到了服务器，就会通过相反的方式将数据一层一层的还原回去；")]),t._v(" "),e("h2",{attrs:{id:"八-响应报文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八-响应报文","aria-hidden":"true"}},[t._v("#")]),t._v(" 八.响应报文")]),t._v(" "),e("p",[t._v("HTTP响应报文也是由三部分组成: "),e("code",[t._v("响应行")]),t._v(", "),e("code",[t._v("响应报头")]),t._v("和"),e("code",[t._v("响应报文")]),t._v("。")]),t._v(" "),e("p",[e("strong",[t._v("响应行")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 格式：HTTP-Version Status-Code Status-Code-Description CRLF(换行符)")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// HTTP协议版本为1.1 状态码是200，状态描述为OK，")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("200")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("OK")]),t._v("\n")])])]),e("p",[t._v("我们可以看到响应行由"),e("code",[t._v("HTTP协议版本")]),t._v("、"),e("code",[t._v("状态码")]),t._v("和"),e("code",[t._v("状态描述")]),t._v("组成。")]),t._v(" "),e("p",[t._v("状态码是由3位数组成，第一个数字定义了响应的类别，且有五种可能取值:")]),t._v(" "),e("ul",[e("li",[t._v("1xx：指示信息–表示请求已接收，继续处理。")]),t._v(" "),e("li",[t._v("2xx：成功–表示请求已被成功接收、理解、接受。")]),t._v(" "),e("li",[t._v("3xx：重定向–要完成请求必须进行更进一步的操作。")]),t._v(" "),e("li",[t._v("4xx：客户端错误–请求有语法错误或请求无法实现。")]),t._v(" "),e("li",[t._v("5xx：服务器端错误–服务器未能实现合法的请求。")])]),t._v(" "),e("p",[t._v("平时遇到比较常见的状态码有:200, 204, 301, 302, 304, 400, 401, 403, 404, 422, 500。")]),t._v(" "),e("p",[e("strong",[t._v("响应报头")])]),t._v(" "),e("p",[t._v("响应头部包含 "),e("code",[t._v("响应报文的附加信息")]),t._v("，由 属性/值 对组成")]),t._v(" "),e("p",[e("strong",[t._v("响应体(响应报文)")])]),t._v(" "),e("p",[t._v("响应主体包含 "),e("code",[t._v("回车符")]),t._v("、"),e("code",[t._v("换行符")]),t._v("和 "),e("code",[t._v("响应返回数据")]),t._v("，但并不是所有响应报文都有响应数据")]),t._v(" "),e("h2",{attrs:{id:"九-总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#九-总结","aria-hidden":"true"}},[t._v("#")]),t._v(" 九.总结")]),t._v(" "),e("p",[t._v("处理请求->构建请求->查找强缓存->DNS解析->建立TCP连接->进行HTTP请求->得到HTTP响应")])])}),[],!1,null,null,null);a.default=n.exports}}]);