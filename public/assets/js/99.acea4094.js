(window.webpackJsonp=window.webpackJsonp||[]).push([[99],{354:function(t,a,s){"use strict";s.r(a);var e=s(2),T=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"_009-tcp-的超时重传时间是如何计算的？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_009-tcp-的超时重传时间是如何计算的？","aria-hidden":"true"}},[t._v("#")]),t._v(" 009-TCP 的超时重传时间是如何计算的？")]),t._v(" "),s("p",[t._v("TCP 具有超时重传机制，即间隔一段时间没有等到数据包的回复时，重传这个数据包。")]),t._v(" "),s("p",[t._v("那么这个重传间隔是如何来计算的呢？")]),t._v(" "),s("p",[t._v("今天我们就来讨论一下这个问题。")]),t._v(" "),s("p",[t._v("这个重传间隔也叫做"),s("strong",[t._v("超时重传时间")]),t._v("(Retransmission TimeOut, 简称RTO)，它的计算跟上一节提到的 RTT 密切相关。这里我们将介绍两种主要的方法，一个是经典方法，一个是标准方法。")]),t._v(" "),s("h3",{attrs:{id:"经典方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#经典方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 经典方法")]),t._v(" "),s("p",[t._v("经典方法引入了一个新的概念——SRTT(Smoothed round trip time，即平滑往返时间)，没产生一次新的 RTT. 就根据一定的算法对 SRTT 进行更新，具体而言，计算方式如下(SRTT 初始值为0):")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("SRTT =  (α * SRTT) + ((1 - α) * RTT)\n")])])]),s("p",[t._v("其中，α 是"),s("strong",[t._v("平滑因子")]),t._v("，建议值是0.8，范围是0.8 ~ 0.9。")]),t._v(" "),s("p",[t._v("拿到 SRTT，我们就可以计算 RTO 的值了:")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("RTO = min(ubound, max(lbound, β * SRTT))\n")])])]),s("p",[t._v("β 是加权因子，一般为1.3 ~ 2.0， "),s("strong",[t._v("lbound")]),t._v(" 是下界，"),s("strong",[t._v("ubound")]),t._v(" 是上界。")]),t._v(" "),s("p",[t._v("其实这个算法过程还是很简单的，但是也存在一定的局限，就是在 RTT 稳定的地方表现还可以，而在 RTT 变化较大的地方就不行了，因为平滑因子 α 的范围是0.8 ~ 0.9, RTT 对于 RTO 的影响太小。")]),t._v(" "),s("h3",{attrs:{id:"标准方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#标准方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 标准方法")]),t._v(" "),s("p",[t._v("为了解决经典方法对于 RTT 变化不敏感的问题，后面又引出了标准方法，也叫Jacobson / Karels 算法。")]),t._v(" "),s("p",[t._v("一共有三步。")]),t._v(" "),s("p",[s("strong",[t._v("第一步")]),t._v(": 计算SRTT，公式如下:")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("SRTT = (1 - α) * SRTT + α * RTT\n")])])]),s("p",[t._v("注意这个时候的 α跟经典方法中的α取值不一样了，建议值是1/8，也就是0.125。")]),t._v(" "),s("p",[s("strong",[t._v("第二步")]),t._v(": 计算RTTVAR(round-trip time variation)这个中间变量。")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("RTTVAR = (1 - β) * RTTVAR + β * (|RTT - SRTT|)\n")])])]),s("p",[t._v("β 建议值为 0.25。这个值是这个算法中出彩的地方，也就是说，它记录了最新的 RTT 与当前 SRTT 之间的差值，给我们在后续感知到 RTT 的变化提供了抓手。")]),t._v(" "),s("p",[s("strong",[t._v("第三步")]),t._v(": 计算最终的RTO:")]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("RTO = µ * SRTT + ∂ * RTTVAR\n")])])]),s("p",[t._v("µ建议值取1, ∂建议值取4。")]),t._v(" "),s("p",[t._v("这个公式在 SRTT 的基础上加上了最新 RTT 与它的偏移，从而很好的感知了 RTT 的变化，这种算法下，RTO 与 RTT 变化的差值关系更加密切。")])])}),[],!1,null,null,null);a.default=T.exports}}]);